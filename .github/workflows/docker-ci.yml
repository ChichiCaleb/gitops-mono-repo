---
name: Docker CI

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
# # FIRST JOB #######################################################################   
  # build-test-image:
  #   name: Build Image for Testing
  #   runs-on: ubuntu-latest

  #   permissions:
    
  #     contents: read
      
  #     packages: write # needed to push docker image to ghcr.io

  #   steps:
      
    

  #     - name: checkout
  #       uses: actions/checkout@v4

  #     - name: Extract metadata for the Docker image
  #       id: docker_meta  
  #       uses: docker/metadata-action@v5
  #       with:
  #        images: ghcr.io/${{ github.repository }}

  #        tags: |
  #           ${{ github.run_id }}
   


 
        

        

  #     - name: create custom network
  #       run : |
  #         docker network create stack


  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #       with:
  #         driver-opts: |
  #           network=stack


  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Login to ghcr.io registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.repository_owner }}
  #         password:  ${{ secrets.GITHUB_TOKEN }}

        
  #     - name: Build and Push to GHCR
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./
  #         file: infra/docker/web/Dockerfile
  #         push: true
          
  #         tags: ${{ steps.docker_meta.outputs.tags }}
          
         
          
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #         platforms: linux/amd64
         
            

    
#  # NEXT JOB #######################################################################   
  # test-unit:
  #   name: Unit tests in Docker
  #   needs: [build-test-image]
  #   runs-on: ubuntu-latest

  #   permissions:
  #     packages: read
      
  #   steps:
      
  #     - name: Login to ghcr.io registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.repository_owner }}
  #         password:  ${{ secrets.GITHUB_TOKEN }}

  #     - name: Downcase repo name
  #       run: |
  #        echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
      
  #     - name: Unit Testing in Docker
  #       run: docker run --rm ghcr.io/${REPO}:"$GITHUB_RUN_ID" sh -c "yarn test"


# # NEXT JOB #######################################################################   
  test-integration:
    name: Integration tests in Compose
    # needs: [build-test-image]
    runs-on: ubuntu-latest

    permissions:
      packages: read
      contents: read
     

    steps:

      - name: Checkout git repo
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Login to ghcr.io registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password:  ${{ secrets.GITHUB_TOKEN }}

      - name: Downcase repo name
        
        run: |
              echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Test healthcheck in Docker Compose
        # ghcr.io/${REPO}:"$GITHUB_RUN_ID"
        run: |
          export TESTING_IMAGE=ghcr.io/chichicaleb/gitops-mono-repo:736483271
          echo Testing image: "$TESTING_IMAGE"
          docker compose -f ./infra/docker/web/integration-test/docker-compose-test.yml up --exit-code-from sut
# NEXT JOB #######################################################################   
  # test-k3d:
  #   name: Test Deployment in Kubernetes
  #   # needs: [build-test-image]
  #   runs-on: ubuntu-latest

  #   permissions:
  #     packages: read

  #   steps:

  #     - name: Checkout git repo
  #       uses: actions/checkout@v4

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
      
  #     - name: Login to ghcr.io registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Downcase repo name
  #       run: |
  #             echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

  #     - uses: AbsaOSS/k3d-action@v2
  #       with:
  #         cluster-name: "test-cluster-1"
  #         args: >-
  #           --agents 1
  #           --no-lb
  #           --k3s-arg "--no-deploy=traefik,servicelb,metrics-server@server:*"
      
  #     - name: Smoke test deployment in k3d Kubernetes
  #       run: |
  #         kubectl create secret docker-registry regcred \
  #           --docker-server=https://ghcr.io \
  #           --docker-username=${{ github.repository_owner }} \
  #           --docker-password=${{ secrets.GITHUB_TOKEN }}
  #         export TESTING_IMAGE=ghcr.io/chichicaleb/gitops-mono-repo:7364364638
  #         envsubst < infra/docker/web/manifest/deployment.yml  | kubectl apply -f infra/docker/web/manifest
  #         kubectl rollout status deployment calcom
  #         kubectl exec deploy/calcom -- curl --fail localhost:3000


# # NEXT JOB #######################################################################   
#   scan-image:
#     name: Scan Image with Trivy
#     needs: [build-test-image]
#     runs-on: ubuntu-latest

#     # permissions:
#     #   contents: read # for actions/checkout to fetch code
#     #   packages: read # needed to pull docker image to ghcr.io
#     #   security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
#     permissions:
#      actions: read
#      contents: read
#      security-events: write
 

#     steps:

#       - name: Checkout git repo
#         uses: actions/checkout@v4
      
#       - name: Login to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}
          
#       - name: Login to ghcr.io registry
#         uses: docker/login-action@v3
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       - name: Pull image to scan
#         run: docker pull ghcr.io/chichicaleb/calkube:"$GITHUB_RUN_ID"
        
#       - name: Run Trivy for all CVEs (non-blocking)
#         uses: aquasecurity/trivy-action@master
#         with:
#           image-ref: ghcr.io/chichicaleb/calkube:${{ github.run_id }}
#           format: table
#           exit-code: 0

      
#       - name: Upload Trivy scan results to GitHub Security tab
#         uses: github/codeql-action/upload-sarif@v2
#         if: always()
#         with:
#           sarif_file: 'trivy-results.sarif'

# NEXT JOB #######################################################################   
  # build-final-image:
  #   name: Build Final Image
  #   # needs: [test-unit, scan-image]
  #   runs-on: ubuntu-latest

  #   permissions:
  #     contents: read
  #     packages: write # needed to push docker image to ghcr.io
  #     pull-requests: write # needed to create and update comments in PRs

  #   steps:
     
    
  #     - name: checkout
  #       uses: actions/checkout@v3

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: create custom network
  #       run : |
  #         docker network create stack 
   

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #       with:
  #         driver-opts: |
  #           network=stack
        
    

    
        

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Login to ghcr.io registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Docker Metadata for Final Image Build
  #       id: docker_meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: horizonclient/calkube
  #         flavor: |
  #           latest=false
  #         tags: |
  #           type=raw,value=99
  #           type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
  #           type=ref,event=pr
  #           type=ref,event=branch
  #           type=semver,pattern={{version}}


  #     - name: Docker Build and Push to GHCR and Docker Hub
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./
  #         file: infra/docker/web/Dockerfile
  #         push: true
  #         tags: ${{ steps.docker_meta.outputs.tags }}
  #         labels: ${{ steps.docker_meta.outputs.labels }}
         
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #         platforms: linux/amd64,linux/arm64
          
        

  #       # If PR, put image tags in the PR comments
       
  #     - name: Find comment for image tags
  #       uses: peter-evans/find-comment@v1
  #       if: github.event_name == 'pull_request'
  #       id: fc
  #       with:
  #         issue-number: ${{ github.event.pull_request.number }}
  #         comment-author: 'github-actions[bot]'
  #         body-includes: Docker image tag(s) pushed
     
  #     - name: Create or update comment for image tags
  #       uses: peter-evans/create-or-update-comment@v1
  #       if: github.event_name == 'pull_request'
  #       with:
  #         comment-id: ${{ steps.fc.outputs.comment-id }}
  #         issue-number: ${{ github.event.pull_request.number }}
  #         body: |
  #           Docker image tag(s) pushed:
  #           ```text
  #           ${{ steps.docker_meta.outputs.tags }}
  #           ```

  #           Labels added to images:
  #           ```text
  #           ${{ steps.docker_meta.outputs.labels }}
  #           ```
  #         edit-mode: replace